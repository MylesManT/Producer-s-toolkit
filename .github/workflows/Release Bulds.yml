## ...existing code...
name: Build and Release Cross-Platform

on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r PTK/requirements.txt
          pip install pyinstaller

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed --name Producers-Toolkit PTK/Producers-Toolkit.py

      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --onefile --windowed --name Producers-Toolkit PTK/Producers-Toolkit.py

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyinstaller --onefile --name Producers-Toolkit PTK/Producers-Toolkit.py

      - name: Create DMG for macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install create-dmg
          create-dmg \
            --volname "Producers-Toolkit Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            "Producers-Toolkit_macOS_latest.dmg" \
            "dist/Producers-Toolkit.app"

      - name: Prepare Windows files
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Create a directory for Windows distribution
          New-Item -ItemType Directory -Force -Path "windows_dist"
          # Copy the executable
          Copy-Item "dist/Producers-Toolkit.exe" -Destination "windows_dist/Producers-Toolkit.exe"
          # Create ZIP from directory contents
          Compress-Archive -Path "windows_dist/*" -DestinationPath "Producers-Toolkit_Windows_latest.zip"

      - name: Create TAR.GZ for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czvf Producers-Toolkit_Linux_latest.tar.gz -C dist Producers-Toolkit

      - name: Upload Windows Artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build_artifact_windows
          path: Producers-Toolkit_Windows_latest.zip

      - name: Upload macOS Artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build_artifact_macos
          path: Producers-Toolkit_macOS_latest.dmg

      - name: Upload Linux Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build_artifact_linux
          path: Producers-Toolkit_Linux_latest.tar.gz

  release:
    name: Release pushed tag
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [ build ]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: build_artifact_windows
          path: build_artifact_windows

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: build_artifact_macos
          path: build_artifact_macos

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: build_artifact_linux
          path: build_artifact_linux

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Producers Toolkit ${{ github.ref_name }}
          body: |
            ## Downloads
            
            Choose the appropriate file for your operating system:
            
            - **Windows**: Producers-Toolkit_Windows_latest.zip
            - **macOS**: Producers-Toolkit_macOS_latest.dmg
            - **Linux**: Producers-Toolkit_Linux_latest.tar.gz
            
            ## Installation Instructions
            
            ### Windows
            1. Download Producers-Toolkit_Windows_latest.zip
            2. Extract the ZIP file
            3. Run Producers-Toolkit.exe
            
            ### macOS
            1. Download Producers-Toolkit_macOS_latest.dmg
            2. Open the DMG file
            3. Drag Producers Toolkit to your Applications folder
            
            ### Linux
            1. ensure the dependency libxcb-cursor0 is installed (e.g., `sudo apt-get install libxcb-cursor0`)
            2. Download Producers-Toolkit_Linux_latest.tar.gz
            3. Extract: `tar -xzvf Producers-Toolkit_Linux_latest.tar.gz`
            4. Run: `./Producers-Toolkit`
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build_artifact_windows/Producers-Toolkit_Windows_latest.zip
          asset_name: Producers-Toolkit_Windows_latest.zip
          asset_content_type: application/zip

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build_artifact_macos/Producers-Toolkit_macOS_latest.dmg
          asset_name: Producers-Toolkit_macOS_latest.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build_artifact_linux/Producers-Toolkit_Linux_latest.tar.gz
          asset_name: Producers-Toolkit_Linux_latest.tar.gz
          asset_content_type: application/gzip